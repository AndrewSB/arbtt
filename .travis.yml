# NB: don't set `language: haskell` here

# The following enables several GHC versions to be tested; often it's enough to test only against the last release in a major GHC version. Feel free to omit lines listings versions you don't need/want testing for.
env:
 - CABALVER=1.18 GHCVER=7.8.4 DOCS=yes
 - CABALVER=1.22 GHCVER=7.10.2
 - CABALVER=head GHCVER=head  # see section about GHC HEAD snapshots
 - WINDOWS=yes
 - STACK=lts-2
 - STACK=lts-3
 - STACK=lts-4
 - STACK=lts-5
 - STACK=lts-6
 - STACK=nightly

matrix:
  allow_failures:
   - env: CABALVER=head GHCVER=head
   - env: STACK=nightly

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - mkdir -p ~/.local/bin
 - export PATH=~/.local/bin:$PATH
 # install stack
 - test -z "$STACK" || { travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack' ; }
 # stack needs cabal :-(
 - test -z "$STACK" || sudo add-apt-repository -y ppa:hvr/ghc
 - test -z "$STACK" || sudo apt-get update
 - test -z "$STACK" || sudo apt-get install cabal-install-1.24
 - test -z "$STACK" || export PATH=/opt/cabal/1.24/bin:$PATH

 # docs
 - test -z "$DOCS" || sudo apt-get install xsltproc docbook-xsl

 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
 - export WINEPATH='C:\Program Files (x86)\GnuWin32\bin'
 - if [ "$WINDOWS" = yes ]; then export W=wine; else export W=""; fi
 - test -z "$WINDOWS"  || bash ./.travis-setup-windows.sh
 - test -z "$CABALVER" || bash ./.travis-setup-linux.sh
 - test -z "$STACK" || sudo apt-get install g++ gcc libc6-dev libffi-dev libgmp-dev make xz-utils zlib1g-dev libwww-perl libx11-dev libxrandr-dev libxinerama-dev
 - 'test -z "$STACK" || RESOLVER="$(HEAD -S https://www.stackage.org/$STACK|grep HEAD|tail -n1|cut -d/ -f4)"'
 - test -z "$STACK" || stack setup --resolver $RESOLVER

install:
 - 'test -z "$STACK" || echo "resolver: $RESOLVER" > stack.yaml'
 - test -z "$STACK" || stack solver --update-config
 - test -z "$STACK" || stack build --only-dependencies

script:
 - test -z "$CABALVER" -a -z "$WINDOWS" || $W cabal configure --enable-tests --enable-benchmarks -v2
 - test -z "$CABALVER" -a -z "$WINDOWS" || $W cabal build
 - test -z "$CABALVER" -a -z "$WINDOWS" || $W cabal test
 - test -z "$CABALVER" -a -z "$WINDOWS" || $W cabal check
 - test -z "$CABALVER" -a -z "$WINDOWS" || $W cabal sdist
 - test -z "$STACK" || stack build --test
 # build the docs on only one of them
 - test -z "$DOCS" || make -C doc html

# The following scriptlet checks that the resulting source distribution can be built & installed
 - test -z "$CABALVER" -a -z "$WINDOWS" || {
   export SRC_TGZ=$($W cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      $W cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi;
   }
