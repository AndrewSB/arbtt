# NB: don't set `language: haskell` here

# The following enables several GHC versions to be tested; often it's enough to test only against the last release in a major GHC version. Feel free to omit lines listings versions you don't need/want testing for.
env:
 - CABALVER=1.18 GHCVER=7.8.4
 - CABALVER=1.22 GHCVER=7.10.2
 - CABALVER=head GHCVER=head  # see section about GHC HEAD snapshots
 - WINDOWS=yes
 - STACK=lts-6
 - STACK=nightly

matrix:
  allow_failures:
   - env: CABALVER=head GHCVER=head

# Note: the distinction between `before_install` and `install` is not important.
before_install:
 - export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$PATH
 - export WINEPATH='C:\Program Files (x86)\GnuWin32\bin'
 - if [ "$WINDOWS" = yes ]; then export W=wine; else export W=""; fi
 - text -n "$WINDOWS"  && bash ./.travis-setup-windows.sh
 - test -n "$CABALVER" && base ./.travis-setup-linux.sh
 - test -n "$STACK" && stack setup --resolver $STACK

before_install:
 - mkdir -p ~/.local/bin
 - export PATH=~/.local/bin:$PATH
 - test -n "$STACK" && { travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack' ; }


install:
 - test -n "$STACK" && stack init --resolver $STACK --force
 - test -n "$STACK" && stack stack solver --update-config
 - test -n "$STACK" && stack build --only-dependencies

script:
 - test -n "$CABALVER" && $W cabal configure --enable-tests --enable-benchmarks -v2
 - test -n "$CABALVER" && $W cabal build
 - test -n "$CABALVER" && $W cabal test
 - test -n "$CABALVER" && $W cabal check
 - test -n "$CABALVER" && $W cabal sdist
 - test -n "$STACK" && stack build --test

# The following scriptlet checks that the resulting source distribution can be built & installed
 - test -n "$CABALVER" && {
   export SRC_TGZ=$($W cabal info . | awk '{print $2 ".tar.gz";exit}') ;
   cd dist/;
   if [ -f "$SRC_TGZ" ]; then
      $W cabal install --force-reinstalls "$SRC_TGZ";
   else
      echo "expected '$SRC_TGZ' not found";
      exit 1;
   fi;
   }
